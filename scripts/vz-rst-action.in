#!/bin/bash
#  Copyright (c) 2013-2015 Parallels IP Holdings GmbH
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This script is called by CRIU (http://criu.org) after creating namespaces.
#
# Parameters are passed in environment variables.
# Required parameters:
#   STATUSFD	  - file descriptor for sending signal to vzctl
#   WAITFD	  - file descriptor for receiving signal from vzctl
#   CRTOOLS_SCRIPT_ACTION - current action (set by criu)

exec 1>&2

restore_devices()
{
	local s d t major minor old dir device
	local pid=$(cat $VE_PIDFILE)

	root=/proc/$pid/root

	# VE_PLOOP_DEVS=UUID@ploopN:major:minor
	for s in $VE_PLOOP_DEVS; do
		uuid=${s%%@*}
		t=${s#*@}
		device=${t%%:*}
		t=${t#*:}
		major=${t%%:*}
		minor=${t##*:}

		[ ! -L "$root/dev/$uuid" ] && continue

		old=$(readlink $root/dev/$uuid)
		[ -z "$old" ] && continue

		let minor=minor+1
		for d in "${old}p1" "/dev/${device}p1"; do
			rm -f $root/$d
			mknod -m 660 $root/$d b $major $minor
		done

		rm -f $root/dev/$uuid
	done
}

if [ -z "$CRTOOLS_SCRIPT_ACTION" ]; then
	echo "Missing parameter CRTOOLS_SCRIPT_ACTION"
	exit 1
fi

set -e
case "$CRTOOLS_SCRIPT_ACTION" in
"setup-namespaces")
	pid=$(cat $VE_PIDFILE)
	ln -s /proc/$pid/ns/net $VE_NETNS_FILE

	if [ -n "$VEID" ]; then
		cgset -r ve.pseudosuper="0" $VEID
		cgset -r ve.state="START $pid" $VEID || exit
	fi
	;;
"post-setup-namespaces")
	restore_devices
	;;
"network-unlock")
	ret=0
	[ -n "$STATUSFD" ] && printf '\0\0\0\0' >&${STATUSFD}
	[ -n "$WAITFD" ] && ret=$(cat <&$WAITFD | hexdump -e '"%d"' -n 4)

	[ "$ret" -eq "0" ]
	;;
esac
